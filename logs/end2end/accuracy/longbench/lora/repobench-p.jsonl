{"pred": "    private transient KadConfiguration config;\n    private transient KademliaRoutingTable routingTable;\n    private transient KadSerializer<JademliaStorageEntry> serializer;\n    private transient KadConfiguration config;\n    private transient KademliaDHT", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "        mParameterListAdapter = new ParameterListAdapter(mParameterListAdapter);\n        mParameterListAdapter.setList(mEffects);\n        mParameterListAdapter.setOnItemSelectedListener(this);\n        mParameterListAdapter.setOnItemLongClickListener(this);\n        mParameter", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\n    cipher = Cipher(1, 1)\n    key_schedule = KeySchedule1(KeySchedule1)\n    encryption = Encryption(BvFunction(MyFunction)\n    rounds = 1\n    set_rounds(2)\n\n    set", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "    private Effects = new ArrayList<Effect>();\n    private Effects(Effect... effects) {\n        this(effects);\n    }\n    public Effects() {\n        this(null);\n    }\n    public Effects(Effect... effects) {\n        this(null);", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "                new EventHandler<UpdateFrequencyChange.class, UpdateFrequencyChangeEvent::fromCommand, this::Event));\n        commandProcessor.addHandler(\n                new CommandHandler<SetFrequencyCommand, UpdateFrequencyChange::fromCommand, this::Event));\n        commandProcessor.addHandler\n", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    private LocalRateLimiter localRateLimiter;\n    /**\n     * 全局任务配置\n     */\n    private TaskRunnerConfig taskConfig;\n    /**\n     * 本地任务配置\n     */\n    private TaskRunnerConfig taskConfig;\n    /**", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\t\t// ...\n\t\t}\n\t}\n}\n}\n\n\n\nclass CheckCommand implements Runnable {\n\tprivate final String name;\n\tprivate final String passphrase;\n\tprivate final String passphrase;\n\tprivate final String name;\n\tprivate final", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "            KeyEncryption.saveRSAKeys(deviceId, pubKeyInBase64);\n            // save deviceId to shared preferences\n            DatabaseManager.INSTANCE.setDeviceId(deviceId);\n            // save publicKey to external storage\n            CloudMessaging.storePublicKey(", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    SignRequest signRequest = new SignRequest(ACCOUNT_NAME, APP_ENROLL, SERVER_CHALNGE_SIGN_BASE6);\n    assertEquals(new SignRequest(\"U2F_V2\", SERVER_CHALNGE_SIGN_BASE", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "            self.ua.recvEvent(event)\n            self.state = CCStateDead\n            return\n        if self.uaO == None:\n            self.uaO = self.recvEvent(event)\n            self.state = CCStateDead\n            return\n       ", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "\n    def __init__(self, uri):\n        self.uri = uri\n\n\n\n\nclass Flag(Signature):\n    def __init__(self, flag):\n        self.flag = flag\n\n\n\nBoolean(Signature):\n    def __init__(self, value):", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "\n            if cstr_node.binary:\n              cstr_node.rhs = convert_ast_constraint(ast_node)\n            process_children(cstr_node.rhs, ast_node)\n            else:\n              cstr_node.lhs = convert_", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "                activity.startActivity(Intent.ACTION_VIEW, url);\n            }\n        }\n    }\n    private boolean useInternPlayer(TDActivity activity) {\n        return activity.getClass().getName().equals(VideoPlayerActivity.class.getName());\n    }\n    private", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "        // ...\n    }\n    }\n}\n\n\n\nForkMe-Mobile/app/src/main/java/dlei/forkme/endpoints/ForkMeBackendApi.java\npublic interface ForkMeBackendApi {\n    // Get all repositories v", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "\n        pass\n\n    def test_invalid_args(self):\n        ''' Invalid arguments. '''\n        pass\n\n    def test_fixture(self):\n        ''' Test fixture. '''\n        pass\n    def test_fixture_args(self):\n        ''' Test fi", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "    user = User(id=\"user_id\", email=\"user@domain.com\")\n    assert user.id == \"user_id\"\n    assert user.email == \"user@domain.com\"\n    assert not hasattr(user, \"name\")\n    init_called = True", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "\n    @method('infix('+', b=10)\ndef select_union_operator(self, context=None):\n        if context is None:\n            raise self.missing_context()\n        for context.item in context.inner_select(self[0]:\n           ", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                    new GrayscaleTransformation(),\n                    new HSBAdjustTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTransformation(),\n                    new MaskTransformation(),", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n        view.setVisibility(View.GONE);\n\n\n\n    @Bind(R.id.text_movie_title) TextView textMovieTitle;\n    @Bind(R.id.text_runtime) TextView textRuntime;\n    @Bind(R.id.text_gen", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "                if (instance == null) {\n                    throw new MBeanRegistrationException(\"Unable to create MBean\");\n                }\n                write(instance, ADD_NOTIFICATION_LISTENER, correlationId);\n                log.trace(\"CreateMBean - Success\");\n            } catch", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "        await wild_report.monitor_status()\n        await wild.delete()\n        wild.monitor_task = None\n        wild.monitor_task = None\n        wild.monitor_task_tuple = None\n        wild.monitor_task_id = None\n       ", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "    if vocab is None:\n        vocab = Vocabulary(c['vocab'])\n\n\n\n\nSo the code is loading the vocabulary from the config file. If it is not there, it loads it from the default vocabulary. If it is", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "  assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  doppler.tec_epm2 == 50.\n  doppler.amplitude_mps = 50.", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.Activity.SLIDE_LEFT);\n            }", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "            assert self.redlock.acquire()\n        assert self.redis.exists(self.redlock.key)\n        assert self.redlock.locked()\n        time.sleep(self.redlock.auto_release_time * 2)\n        assert self.redis", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "        self._sptr = c_void_p()\n        self._get_func = \"FMOD_%s_Get3DConeSettings\" % self._sptr\n        self._set_func = \"FMOD_%s_Set3DConeSettings\" % self._", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "    def calg_int(self, val):\n        self._calg = CompressionAlgorithm(val)\n    @sdproperty\n    def compress(self):\n        if self.calg == CompressionAlgorithm.Uncompressed:\n            return data\n        if self.cal", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "        cellSize = getParameter(detectCellShapeParameter, \"size\", size);\n        cellSize = getParameter(detectCellShapeParameter, \"size\", size);\n        cellSize = getParameter(detectCellShapeParameter, \"size\", size);\n        cellSize = getParameter(", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "            Assets.perfectSwipeSound.play(GlobalConfiguration.feedbackVolume);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume);\n        } else if", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "            while (transactionIterator.hasNext()) {\r\n                Transaction t = transactionIterator.next();\r\n                printer.print(t);\r\n                System.out.println();\r\n            }\r\n        }\r\n        }\r\n    }\r\n    }\r\n}\r\n}\r\n", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "            }\n            }\n        }\n        return pgm;\n    }\n}\n}\n\n\n\n", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                self.encryption_algorithm = EncryptionAlgorithm(UsageEncryption, operation_mode=EncryptionAlgorithmParameter.OSY, algorithm_parameter_value=self.algorithm_parameter_value)\n                self.algorithm_parameter_iv_name = AlgorithmParameterName.IVC)\n", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                        if (regex.btMemEnd < i) {\n                            regex.btMemEnd = i;\n                            regex.btMemEnd = i;\n                            regex.captureHistory = i;\n                        }\n                    }\n                }\n            }\n        }\n", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "    url(r'^pipeline-config$', login_required(ajax_toggle_pipeline_config), name=\"ajax-toggle-pipeline\"),\n    url(r'^delete-pipeline-config$', login_required(ajax_delete_pipeline_config), name=\"", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\n\tprivate void getData () {\n\t\tmeter = new MeterSpec (this);\n\ttags = new HashMap<RSLevel, String> ();\n\tcolors = new HashMap<RSLevel, Integer> ();\n\tnotEnoughData = new String ();\n\tnextLine:\n\tmeter", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "        self._storage_type = storage_type\n        return self\n    def set_db_type(self, db_type):\n        if db_type in DB_TYPES:\n            # choice storage if present\n            self._db_type = db_type\n        else:", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "    public <Argument> void recordGivenStep(CheckedRunnable givenStep) {\n        givenSteps.add(functions.toConsumer(() -> {\n            try {\n                givenStep.run();\n            } catch (Throwable) {\n                throw new PreparationError(\"F", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "    if (expectedCodes.length == 0) {\n      // No expected codes\n      return process.await();\n    } else {\n      // Expected codes\n      for (int i = 0; i < expectedCodes.length; i++) {\n        if (!process.", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\tif (textColor == null) {\n\t\ttextColor = Color.WHITE;\n\t} else {\n\ttextColor = Color.parseColor(textColor);\n\t}\n\t}\n\t}\n\tprivate void setTypeface(Typeface typeface) {\n\tif", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t}\n\t}\n\t/**\n\t * Receive JSON messages sent from weixin.\n\t * \n\t * @param request\n\t * @param response\n\t * @return\n\t * @throws IOException\n\t */\n\t@RequestMapping(value = \"/wxapi/", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "    if os.path.exists(file_path):\n        return\n    else:\n        # 运行 apk 文件\n        subprocess.call([adb,\n            \"-s\",\n            get_identifier(),\n            \"shell\",\n            \"am\",\n            \"-", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "    @channel_checks.raid_report_enabled()\n    async def cmd_raid_city(self, ctx, *city):\n        city = ctx.city()\n        timezone = await ctx.guild_profile(key='timezone')\n        raid_party_id =", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "        self.assertTrue(date_to_date(\"2/1/15/2015\") == datetime.datetime.datetime(2017, 12, 1, 15, 1, 3))\n        self.assertTrue(date_to_", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "        config_actor = ConfigActor(config_file, work_dir=self.work_dir)\n        config_actor.start()\n        # start the persistence actor\n        # start the database actor\n        database_actor = DatabaseActor(999, delay_seconds=", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                        Intent.ACTION_SEND);\n                        case 1:\n                        Intent.ACTION_SEND);\n                        case 2:\n                        Intent.ACTION_SEND;\n                        case 3:\n                        Intent.ACTION_SEND;\n                        case", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\tcontrast_names = []\n\t\t\tfor j in range(num_contrasts):\n\t\t\t\t\tcontrast_names.append(\"tstat_pWER_con%d\" % (j+1)\n\t\t\t\tfor k in range", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "                OAuthActivity.class,\n                OAuthActivity.class,\n                OAuthActivity.class,\n                OAuthActivity.class,\n                OAuthActivity.class,\n                OAuthActivity.class,\n                OAuthActivity.class,\n                OAuthActivity.class,\n", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "                PubKeyAlgorithm.ECDH: ECDSASignature,\n                PubKeyAlgorithm.ECDH: ECDSASign,\n                PubKeyAlgorithm.ECDSA: ECDSASign,\n                PubKeyAlgorithm.ElGamal: El", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "            if context.is_schema_node(item):\n                self.add_xsd_type(xsd_element)\n                yield item\n            elif context.is_principal_node_kind():\n                if isinstance(item, (TypedAttribute, TypedElement):\n                   ", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "\n\"\"\"HeapVarzBase(VarzBase):\n  size - The number of nodes in the pool\n    no_members - The number of times the balancer served a failing requests\n                 because there were no members in the pool.\n    _VAR_BASE_NAME = 'scales", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
