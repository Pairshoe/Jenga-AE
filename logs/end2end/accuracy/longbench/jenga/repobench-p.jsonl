{"pred": "\n    private transient KademliaRoutingTable routingTable;\n    private transient KadConfiguration config;\n    private transient KadSerializer<JademliaStorageEntry> serializer;\n    private transient KadContentManager contentManager;\n    private transient KadSerializer", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "        mParameterListAdapter = new ParameterListAdapter(mParameterListAdapter);\n        mParameterListAdapter.setOnItemSelectedListener(this);\n        mParameterListAdapter.setOnItemLongClickListener(this);\n        mParameterListAdapter.setOnItemClickListener(this);\n        mParameter", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\n\nclass Cipher1(Cipher):\n    key_schedule = KeySchedule1\n    encryption = Encryption(BvFunction)\n    rounds = 1\n    _minimum_rounds = 1\n    def __new__(cls, plaintext, masterkey", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "\n    private EffectManager(Activity activity, ViewGroup parameterListView, MenuItem parameterToggleMenuItem, SpectaculumView spectaculumView) {\n        mActivity = activity;\n        mParameterListView = parameterListView;\n        mParameterListAdapter = new EffectParameterListAdapter(mParameterList", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "                new EventHandler<UpdateFrequencyChange.class, UpdateFrequencyChangeEvent::fromCommand, this::Event));\n        commandProcessor.addHandler(new EventHandler<SetFrequencyChange.class, UpdateFrequencyChangeEvent::fromCommand, this::Event));\n        commandProcessor.addHandler", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "     * \n     * 获得队列信息。\n     *\n     * @param queueName\n     * @return 0 是消息数量 1 是消费者数量\n     */\n    public int[] getQueueInfo(String queue", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\t\tProblems = integrityCheck(args.path, args.checkFileIntegrity);\n\t\t\tif (s.isEmpty()) {\n\t\t\t\tSystem.out.println(\"No problems found.\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "            KeyEncryption.saveRSAKeys(deviceId, pubKeyInBase64);\n            // save deviceId to shared preferences\n            DatabaseManager.INSTANCE.setDeviceId(deviceId);\n            // save publicKey to external storage\n            CloudMessaging.storePublicKey(", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    SignRequest signRequest = new SignRequest(ACCOUNT_NAME, SERVER_CHALLENGE_SIGN_BASE6);\n    assertEquals(new SignRequest(\"U2F_V2\", SERVER_CHALLENGE_SIGN_BASE6, SERVER_", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "            self.uaO.recvEvent(event)\n        else:\n            self.uaO.recvEvent(event)\n    def placeOriginate(self, route):\n        if self.uaO == None:\n            self.uaO = Ua(self.global_", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "\n\n    def __init__(self, uri):\n        self.uri = uri\n\n\n\n\nclass Flag(Signature):\nNext line of code:\n    def __init__(self, flag):\n        self.flag = flag\n\n\n\nBoolean(Signature):\nNext line", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "\n\n  def __re__(self):\n    return 'Constraint(%s)' % self.tree\nequip/analysis/constraint/expr.py\n\n\n\"\"\"\n\n\n\nSo the code is:\n\n\n\n__init__(self, kind=UNWN, data=None,", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "                activity.startActivity(Intent.ACTION_VIEW);\n                intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n}\n\n\n\nprivate boolean useInternPlayer(TDActivity activity) {\n   ", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "        String email = location.getEmail();\n        String name = location.getName();\n        String avatarUrl = location.getAvatarUrl();\n        PostLocationBody postLocationBody = new PostLocationDataBody(location.login, latitude, longitude, email, name, avatarUrl);", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "        pass\n\n    def test_invalid_args(self):\n        ''' Invalid arguments. '''\nNext line of code:\n        pass\n    def test_fixture(self):\n        ''' Test fixture. '''\nNext line of code:\n        pass\n    def test_fixture", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "    if init_called:\n        init_called = True\n    else:\n        init_called = False\n\n\n\ndef test_load_default_init(engine):\n    \"\"\"The default loader uses cls.__new__(cls) method\"\"\"\n    init_called = False\n", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "\n    def select_simple_map_operator(self, context: XPathContext = None) -> Iterator[Any]:\n        if context is None:\n            raise self.missing_context()\n        for item in context.inner_select(self[0]:\\\n            for result in", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                    new GrayscaleTransformation(),\n                    new HSBAdjustTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTransformation(),\n                    new MaskTransformation(),", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n\n    private final ButterKnife.Action<View> SHOW = view -> view.setVisibility(View.VISIBLE);\n    private final ButterKnife.Action<View> HIDE = view -> view.setVisibility(View.GONE);\n\n   ", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "                if (instance == null) {\n                    throw new MBeanRegistrationException(\"Unable to create MBean\");\n                }\n                write(instance, ADD_NOTIFICATION_LISTENER, correlationId);\n                log.trace(\"CreateMBean - Success\");\n            } catch", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "\n\n    @group(pass_context=True, category='Bot Info', aliases=[\"wild\"])\n    @channel_checks.wild_report_enabled()\n    async cmd_wild(self, ctx, pokemon: Pokemon, *loc):\n        \"\"\"", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "    vocab = Vocabulary(c['vocab'])\n\n\n\n\nSo the key is that the default vocab is loaded from the config file if it exists, otherwise it is None.", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "  assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  doppler.tec_epm2 == 50.\n  accel_mps2 = C / float(GPS.L", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.Activity.SLIDE_LEFT);\n            }", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "            assert self.redlock.acquire()\n        assert self.redis.exists(self.redlock.key)\n        assert self.redlock.locked()\n        time.sleep(self.redlock.auto_release_time * 2)\n        assert self.redis", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "        self._sptr = c_void_p()\n        self._get_func = \"FMOD_%s_Get3DConeSettings\" % self._class_name\n        self._set_func = \"FMOD_%s_Set3DConeSettings\" % self", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "    def calg_int(self, val):\n        self._calg = CompressionAlgorithm(val)\n    @sdproperty\n    def specifier(self):\n        return self._specifier\n    @specifier.register(int)\n    def halg_int(self", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "        cellSize = getParameter(detectCellShapeParameter, \"size\", size);\n        cellSize = getParameter(detectCellShapeParameter, \"size\", size);\n        verbose = getParameter(detectCellShapeParameter, \"verbose\", verbose);\n        if verbose:\n            write", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 0f);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume / 0", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "\r\n            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r\n                notifyOnTransaction(Iterator.next());\r\n            }\r\n            TransactionState n = Iterator.nextTransactionState();\r\n            if (n == TransactionState.INCOMPLETE && n !=", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "            }\n        }\n        }\n        return pgm;\n    }\n}\n}\n", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "\n\n    def decrypt(self, message: FinTSMessage):\n        assert message.segments[0].type == 'HBK'\n        assert message.segments[-1].header.type == 'HBS'\n        plain_segments = message.segments[1:-", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                        regex.btMemEnd = env.btMemEnd;\n                        regex.btMemEnd |= regex.captureHistory;\n                        regex.btMemEnd |= regex.captureHistory;\n                    }\n                }\n            }\n        }\n        }\n       ", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "    url(r'^pipeline-config$', login_required(ajax_toggle_pipeline_config), name=\"ajax-toggle-pipeline-config\"),\n    url(r'^delete-pipeline-config$', login_required(ajax_delete_pipeline_config),", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\n\tprivate static final String[][][][] data = {\n\t\t\t\"\",\n\t\"\",\n\t\"\",\n\t\"\",\n\t\"\",\n\t\"\",\n\t\"\",\n\t\"\",\n\t\"\",\n\t\"\",\n\t\"\",\n\t\"\",", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "        self._storage_type = storage_type\n        return self\n    def set_user(self, user):\n        self._user = user\n        return self\n    def set_pass(self, pass):\n        self._pass = pass\n        return self\n    def set_client", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "    public GivenTwoArgumentsWhenSteps<Preparation<SystemUnderTest> newGivenTwoArgumentsWhenSteps(Preparation<SystemUnderTest> preparation) {\n        this.preparation = preparation;\n        return new GivenTwoArgumentsWhenSteps(preparation);", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "    if (process == null) {\n      throw new IosDeviceException(this, \"No process to await\");\n    }\n    if (expectedCodes == null || expectedCodes.length == 0) {\n      expectedCodes = new ImmutableList.of(0);\n", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\tTextView tv.setTextColor(textColor);\n\t}\n\tprivate void setTypeface(Typeface typeface, int fontStyle) {\n\tTextView.setTypeface(typeface, fontStyle);\n\t}\n\tprivate void setImageViewLayoutParams(ImageView img) {\n\tif (", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t}\n\t}\n\t\n}\n", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "    if os.path.exists(file_path):\n        return\n    else:\n        # 运行 apk文件\n        subprocess.call([adb,\n            \"-s\",\n            get_identifier(),\n            \"shell\",\n            \"am\",\n            \"-n", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "    @channel_checks.raid_report_enabled()\n    async def cmd_raid_city(self, ctx, *city_title):\n        \"\"\"\n        **!raid-city channel-name** - creates a raid channel\n        **Organizer commands:**\n        **add", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "        self.assertTrue(date_to_date(\"25/1/2015\") == datetime.datetime.datetime(2017, 12, 1, 15, 1, 3))\n        self.assertTrue(date_to_date(\"", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "        config_actor = ConfigActor(config_file, work_dir=self.work_dir)\n        config_actor.start()\n        # start the persistence actor\n        # TODO: Use message - notorm access!\n        database_actor = DatabaseActor(999", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                        Intent.ACTION_SEND);\n                        case 1:Intent.ACTION_SEND);\n                        case 2:Intent.ACTION_SEND);\n                        case 3:Intent.ACTION_SEND);\n                        case 4:Intent.ACTION_SEND", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\tcontrast_names = []\n\t\t\tfor j in range(num_contrasts):\n\t\t\t\t\tcontrast_names.append(\"tstat_pWER_con%d\" % (j+1))\n\t\t\t\tfor k in range", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "                OhmageSyncAdapter.class,\n                StreamAdapter.class,\n                SurveysFragment.class,\n                OauthActivity.class,\n                OauthActivity.class,\n                OauthActivity.class,\n                OauthFragment.class,\n                OhmletsGridFragment", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "                PubKeyAlgorithm.ECDH: ECDSASignature,\n                PubKeyAlgorithm.ECDH: ECDSASign,\n                PubKeyAlgorithm.ECDSA: ECDSASign,\n                PubKeyAlgorithm.ElGamal: El", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "            if context.axis == 'attribute':\n                if isinstance(item, (Attribute, TypedAttribute):\n                    yield item\n            elif is_element_node(item):\n                yield item\n            else:\n                # XSD typed selection\n                for item in context.iter_", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "\n\nclass HeapVarzMetric(VarzMetric):\n  \"\"\"\n    size - The number of nodes in the pool\n    no_members - The number of times the balancer served a failing requests\n                 because there were no members in the pool.\n    _VAR_BASE_", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
